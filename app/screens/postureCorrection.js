import React, { useState } from 'react';
import { useRouter, useLocalSearchParams } from "expo-router";
import { View, StyleSheet, Text, SafeAreaView } from 'react-native';

import CameraComponent from '../../src/components/CameraComponent';
import { useSelector } from 'react-redux';
import icons from '../../constants/icons.js';
import { FeedBack, FloatingBtn, CustomBtn, InfoModal, ModalWebView, ScrollTextBox, LoadingModal } from '../../src/components';
import AsyncStorage from '@react-native-async-storage/async-storage';
import API from '../../src/api';

const exerciseMapping = {
    "Ïä§ÏøºÌä∏": "squat.glb",
    "ÏúóÎ™∏ ÏùºÏúºÌÇ§Í∏∞": "sit_up.glb",
    "ÏÇ¨Ïù¥Îìú Î†àÌÑ∞Îü¥ Î†àÏù¥Ï¶à": "side_lateral_raise.glb",
    "ÌåîÍµΩÌòÄÌé¥Í∏∞": "push_up.glb",
    "Î†àÍ∑∏ Î†àÏù¥Ï¶à": "leg_raise.glb",
    "Îç§Î≤® Ìä∏ÎùºÏù¥ÏÖâ ÏùµÏä§ÌÖêÏÖò": "dumbbell_tricep_extension.glb",
    "Îç§Î≤® ÏàÑÎçî ÌîÑÎ†àÏä§": "dumbbell_shoulder_press.glb",
    "Îç§Î≤® ÌîåÎùºÏù¥": "dumbbell_fly.glb",
    "Îç§Î≤® Ïª¨": "dumbbelcurl.glb",
    "Îç§Î≤® Ìä∏ÎùºÏù¥ÏÖâ ÏùµÏä§ÌÖêÏÖò ÌÅ¨Î°úÏä§": "dumbbell_tricep_extension_c.glb"
};

const PostureCorrection = () => {
    const router = useRouter();
    const { title, count, id, sets, reps } = useLocalSearchParams();
    const exerciseData = { title, count, id, sets, reps };
    console.log(exerciseData);
    const [feedback, setFeedback] = useState("ÏûêÏÑ∏Î•º Ïû°ÏïÑÏ£ºÏÑ∏Ïöî.");
    const [modalVisible, setModalVisible] = useState(false);
    const [loadingVisible, setLoadingVisible] = useState(false);
    const [exerciseFinished, setExerciseFinished] = useState(false);
    const modal3dVisible = useSelector(state => state.modalVisible.modal3dVisible);

    const handleFinishExercise = (exerciseCompleted) => {
        setLoadingVisible(true);
        AsyncStorage.getItem('userId').then((userId) => {
            API.completedExercise(userId, exerciseData.id).then(() => {
                setLoadingVisible(false);
                setExerciseFinished(exerciseCompleted);
                setModalVisible(false);
            });
        });
    };

    const handleFeedback = (newFeedback) => {
        setFeedback(newFeedback);
    };

    const modelPath = exerciseMapping[exerciseData.title] || 'default_model.glb';

    return (
        <SafeAreaView style={styles.mainContainer}>
            {!exerciseFinished && (
                <>
                    <CameraComponent
                        style={exerciseFinished ? styles.hideCamera : null}
                        isModalVisible={modal3dVisible}
                        exerciseData={exerciseData}
                        onFeedback={handleFeedback}
                        onExerciseComplete={handleFinishExercise}
                    />

                    <FloatingBtn
                        imageSource={icons.icon_calendar_p}
                        onPress={() => setModalVisible(true)}
                        buttonStyle={styles.infoButton}
                    />
                    <View style={styles.FeedBackContainer}>
                        <FeedBack text={feedback} />
                        <View style={styles.buttonWrapper}>
                            <CustomBtn
                                buttonStyle={[styles.btn, { width: 150, height: 50, marginBottom: 20 }]}
                                textStyle={styles.btnText}
                                title="Ïö¥Îèô ÏôÑÎ£å"
                                onPress={handleFinishExercise}
                            />
                        </View>
                    </View>
                </>
            )}
            {exerciseFinished && (
                <View style={styles.exerciseFinishedContainer}>
                    <Text style={styles.finishText}>Ïö¥ÎèôÏùÑ ÏôÑÎ£åÌñàÏñ¥Ïöîüî•</Text>
                    <ScrollTextBox
                        message="Ïö¥ÎèôÏùÑ Ïûò ÏàòÌñâÌïòÏÖ®ÏäµÎãàÎã§. Ïä§ÏøºÌä∏Îäî ÌïòÏ≤¥ Í∑ºÏú°Í≥º ÏΩîÏñ¥ Í∑ºÏú° Í∞ïÌôîÏóê Ï¢ãÏùÄ Ïö¥ÎèôÏúºÎ°ú Îß§Ïùº Íæ∏Ï§ÄÌûà ÏàòÌñâÌïòÏãúÎ©¥ Ï¢ãÏäµÎãàÎã§."
                    />
                    <View style={styles.btnContainer}>
                        <CustomBtn
                            buttonStyle={styles.btn}
                            textStyle={styles.btnText}
                            title="ÌôàÏúºÎ°ú"
                            onPress={() => router.push('tabs/mainScreen')}
                        />
                    </View>
                </View>
            )}
            <ModalWebView
                modalVisible={modal3dVisible}
                modelPath={modelPath}
            />
            <InfoModal
                modalVisible={modalVisible}
                setModalVisible={setModalVisible}
                exercise={exerciseData.title}
                count={exerciseData.count}
                exerciseDetails="Easy | 390 Calories Burn"
                exerciseDescription="Î≤§Ïπò ÌîÑÎ†àÏä§Îäî ÎåÄÌùâÍ∑º(Í∞ÄÏä¥ ÏïûÏ™ΩÍ≥º ÏúÑÏ™Ω)Í≥º ÏÜåÌùâÍ∑º(Í∞àÎπÑÎºàÏôÄ ÎÇ†Í∞úÎºàÎ•º Ïù¥Ïñ¥Ï£ºÎäî Í∑ºÏú°)ÏùÑ Îã®Î†®Ìï† Ïàò ÏûàÏñ¥Ïöî."
                steps={[
                    "Spread Your Arms",
                    "Rest at The Toe",
                    "Adjust Foot Movement",
                    "Clapping Both Hands",
                ]}
            />
            <LoadingModal visible={loadingVisible} />
        </SafeAreaView>
    );
};

const styles = StyleSheet.create({
    mainContainer: {
        flex: 1,
        position: "relative",
        backgroundColor: "white"
    },
    FeedBackContainer: {
        flex: 0.3
    },
    exerciseFinishedContainer: {
        flex: 1,
        padding: 20,
        backgroundColor: "#F5F6FB",
        alignItems: "center",
        justifyContent: "center"
    },
    pointContainer: {
        width: "100%",
    },
    btnContainer: {
        width: "80%",
    },
    buttonWrapper: {
        width: "100%",
        alignItems: "center",
        backgroundColor: "#F5F6FB"
    },
    FinishBtn: {
        width: 150,
        height: 50,
        padding: 10,
        backgroundColor: '#d9a1d5',
        borderRadius: 10,
        marginLeft: 10,
        marginTop: 20,
    },
    infoButton: {
        position: 'absolute',
        top: 40,
        right: 10,
        zIndex: 10,
        backgroundColor: "#fff"
    },
    finishText: {
        fontWeight: "bold",
        fontSize: 30,
        fontFamily: "Jua",
        marginTop: 50
    },
    btn: {
        width: "100%",
        height: 60,
        padding: 10,
        backgroundColor: "#8994D7",
        marginBottom: 0,
    },
    btnText: {
        fontSize: 18,
        fontFamily: "Jua"
    }
});

export default PostureCorrection;
